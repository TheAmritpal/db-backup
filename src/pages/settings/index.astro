---
const user = Astro.locals.user;
if (!user) {
  return Astro.redirect("/auth/sign-in");
}
import AdminLayout from "@/layouts/AdminLayout.astro";
import {
  GOOGLE_CLIENT_ID,
  GOOGLE_CLIENT_SECRET,
  GOOGLE_REDIRECT_URI,
  GOOGLE_ACCESS_TOKEN,
} from "@/server/settings/setting.constant";
import { treaty } from "@elysiajs/eden";
import type { App } from "@/server/elysia";
const app = treaty<App>("localhost:4321");
const { data } = await app.api.setting.index.get();
let googleConnectUrl = "";
const clientId =
  data?.filter((setting) => setting.name === GOOGLE_CLIENT_ID)?.[0]?.value || "";
const clientSecret =
  data?.filter((setting) => setting.name === GOOGLE_CLIENT_SECRET)?.[0]?.value || "";
const redirectUri =
  data?.filter((setting) => setting.name === GOOGLE_REDIRECT_URI)?.[0]?.value || "";
const accessToken =
  data?.filter((setting) => setting.name === GOOGLE_ACCESS_TOKEN)?.[0]?.value || "";
const showButton = clientId && clientSecret && redirectUri;
if (showButton)
  googleConnectUrl = `https://accounts.google.com/o/oauth2/auth?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=code&scope=https://www.googleapis.com/auth/drive&access_type=offline&prompt=consent`;
---

<script>
  import { treaty } from "@elysiajs/eden";
  import type { App } from "@/server/elysia";
  import Swal from "sweetalert2";
  import {
    GOOGLE_CLIENT_ID,
    GOOGLE_CLIENT_SECRET,
    GOOGLE_REDIRECT_URI,
  } from "@/server/settings/setting.constant";
  const protocol = window.location.protocol === "http:" ? "http": "https"
  const host = `${protocol}://${window.location.host}`
  const app = treaty<App>(host);
  const settingsForm = document.querySelector<HTMLElement>("#settingsForm");
  const google_client_id = document.querySelector<HTMLInputElement>(
    `#${GOOGLE_CLIENT_ID}`
  );
  const google_client_secret = document.querySelector<HTMLInputElement>(
    `#${GOOGLE_CLIENT_SECRET}`
  );
  const google_redirect_uri = document.querySelector<HTMLInputElement>(
    `#${GOOGLE_REDIRECT_URI}`
  );
  const submitBtn = document.querySelector<HTMLElement>(".submitBtn");
  if (settingsForm) {
    settingsForm.addEventListener("submit", async (event: Event) => {
      event.preventDefault();
      try {
        if (submitBtn) {
          submitBtn.innerHTML === "Please wait...";
          submitBtn.setAttribute("disabled", "true");
        }
        if (!google_client_id || !google_client_secret || !google_redirect_uri) {
          return Swal.fire({
            title: "Invalid form",
            text: "Please enter valid credentials",
            icon: "error",
          });
        }
        const postData = [
          {
            name: GOOGLE_CLIENT_ID,
            value: google_client_id.value,
            description: "Google Client ID",
          },
          {
            name: GOOGLE_CLIENT_SECRET,
            value: google_client_secret.value,
            description: "Google Client Secret",
          },
          {
            name: GOOGLE_REDIRECT_URI,
            value: google_redirect_uri.value,
            description: "Google Redirect Uri",
          },
        ];
        const { data, error } = await app.api.setting.index.post(postData);
        if (error) throw error;
        if (data.success) {
          Swal.fire({
            title: "Success",
            text: data.message[0],
            icon: "success",
          });
        } else {
          Swal.fire({
            title: "error",
            text: data.message[0],
            icon: "error",
          });
        }
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } catch (error) {
        const customError = error as {
          status: number;
          value:
            | {
                success: boolean;
                message: string[];
              }
            | string;
        };
        const errorMessage =
          typeof customError.value === "string"
            ? customError.value
            : customError.value.message[0];
        Swal.fire({
          position: "center",
          icon: "error",
          title: errorMessage,
          showConfirmButton: false,
          timer: 2000,
          showCloseButton: true,
        });
      } finally {
        if (submitBtn) {
          submitBtn.innerHTML === "Update";
          submitBtn.removeAttribute("disabled");
        }
      }
    });
  }
  const removeDriveAccess =
    document.querySelector<HTMLInputElement>(".removeDriveAccess");
  if (removeDriveAccess)
    removeDriveAccess.addEventListener("click", async function () {
      try {
        const { data, error } = await app.api.setting["remove-access"].post();
        if (error) throw error;
        if (data.success) {
          Swal.fire({
            title: "Success",
            text: data.message[0],
            icon: "success",
          });
        } else {
          Swal.fire({
            title: "error",
            text: data.message[0],
            icon: "error",
          });
        }
        setTimeout(() => {
          window.location.reload();
        }, 2000);
      } catch (error) {
        const customError = error as {
          status: number;
          value:
            | {
                success: boolean;
                message: string[];
              }
            | string;
        };
        const errorMessage =
          typeof customError.value === "string"
            ? customError.value
            : customError.value.message[0];
        Swal.fire({
          position: "center",
          icon: "error",
          title: errorMessage,
          showConfirmButton: false,
          timer: 2000,
          showCloseButton: true,
        });
      }
    });
</script>
<AdminLayout>
  <style>
    a.disabled {
      pointer-events: none;
      cursor: default;
    }
  </style>
  <div class="container-fluid">
    <!-- start page title -->
    <div class="row">
      <div class="col-12">
        <div
          class="page-title-box d-sm-flex align-items-center justify-content-between bg-galaxy-transparent"
        >
          <h4 class="mb-sm-0">Settings</h4>

          <div class="page-title-right">
            <ol class="breadcrumb m-0">
              <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
              <li class="breadcrumb-item active">Settings</li>
            </ol>
          </div>
        </div>
      </div>
    </div>
    <!-- end page title -->

    <div class="row">
      <div class="col-lg-12">
        <div class="card">
          <div class="card-header align-items-center d-flex">
            <h4 class="card-title mb-0 flex-grow-1">Google Drive Settings</h4>
          </div><!-- end card header -->

          <div class="card-body">
            <div class="live-preview">
              <form
                class="row g-3 needs-validation"
                id="settingsForm"
                novalidate
                autocomplete="off"
              >
                <div class="col-md-4">
                  <label for={GOOGLE_CLIENT_ID} class="form-label">Google Client ID</label
                  >
                  <input
                    type="text"
                    class="form-control"
                    id={GOOGLE_CLIENT_ID}
                    name={GOOGLE_CLIENT_ID}
                    autocomplete="off"
                    value={clientId}
                    required
                  />
                  <div class="valid-feedback">Looks good!</div>
                </div>
                <div class="col-md-4">
                  <label for={GOOGLE_CLIENT_SECRET} class="form-label"
                    >Google Client Secret</label
                  >
                  <input
                    type="text"
                    class="form-control"
                    id={GOOGLE_CLIENT_SECRET}
                    name={GOOGLE_CLIENT_SECRET}
                    autocomplete="off"
                    value={clientSecret}
                    required
                  />
                  <div class="valid-feedback">Looks good!</div>
                </div>
                <div class="col-md-4">
                  <label for={GOOGLE_REDIRECT_URI} class="form-label">Redirect URI</label>
                  <input
                    type="text"
                    class="form-control"
                    id={GOOGLE_REDIRECT_URI}
                    name={GOOGLE_REDIRECT_URI}
                    autocomplete="off"
                    value={redirectUri}
                    required
                  />
                  <div class="valid-feedback">Looks good!</div>
                </div>
                <div class="col-12">
                  <button class="btn btn-primary submitBtn" type="submit">Update</button>
                  {
                    showButton && (
                      <a
                        target="_blank"
                        href={googleConnectUrl}
                        class={`btn btn-warning ${accessToken ? "disabled" : ""}`}
                      >
                        {accessToken ? "Connected to Google Drive" : "Connect To Drive"}
                      </a>
                    )
                  }
                  {
                    accessToken && (
                      <button class="btn btn-danger removeDriveAccess">
                        Remove Drive Access
                      </button>
                    )
                  }
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <!-- end col -->
    </div>
  </div>
  <!-- container-fluid -->
</AdminLayout>
